class Solution {

    // 최대 공약수(GCD) 구하는 함수 - 유클리드 알고리즘
    public static int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    // 최소 공배수(LCM) 구하는 함수
    public static int lcm(int a, int b) {
        return a * b / gcd(a, b);  // LCM(a, b) = (a * b) / GCD(a, b)
    }

    public int[] solution(int numer1, int denom1, int numer2, int denom2) {
        // 두 분모의 최소 공배수(LCM)를 구함
        int commonDenom = lcm(denom1, denom2);
        
        // 분자 계산: 공통 분모로 맞춘 후 두 분자를 더함
        int resultNumer = numer1 * (commonDenom / denom1) + numer2 * (commonDenom / denom2);
        
        // 결과를 기약 분수로 만들기 위해 분자와 분모의 최대 공약수를 구함
        int gcdResult = gcd(resultNumer, commonDenom);
        
        // 기약 분수로 만들기 위해 분자와 분모를 최대 공약수로 나눔
        resultNumer /= gcdResult;
        int resultDenom = commonDenom / gcdResult;
        
        // 결과 배열 반환
        return new int[] {resultNumer, resultDenom};
    }
}
